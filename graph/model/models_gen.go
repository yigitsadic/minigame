// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type GameSession struct {
	ID           string `json:"id"`
	CurrentPrize int    `json:"currentPrize"`
	CreatedAt    string `json:"createdAt"`
}

type Message struct {
	ID          string      `json:"id"`
	Text        string      `json:"text"`
	MessageType MessageType `json:"messageType"`
}

type MessageType string

const (
	MessageTypeInitial     MessageType = "INITIAL"
	MessageTypeUserJoined  MessageType = "USER_JOINED"
	MessageTypeWinnerFound MessageType = "WINNER_FOUND"
	MessageTypeDoublePrize MessageType = "DOUBLE_PRIZE"
)

var AllMessageType = []MessageType{
	MessageTypeInitial,
	MessageTypeUserJoined,
	MessageTypeWinnerFound,
	MessageTypeDoublePrize,
}

func (e MessageType) IsValid() bool {
	switch e {
	case MessageTypeInitial, MessageTypeUserJoined, MessageTypeWinnerFound, MessageTypeDoublePrize:
		return true
	}
	return false
}

func (e MessageType) String() string {
	return string(e)
}

func (e *MessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageType", str)
	}
	return nil
}

func (e MessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
